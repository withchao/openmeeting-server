// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: openmeeting/signal/signal.proto

package signal

import (
	context "context"
	meeting "github.com/openimsdk/protocol/openmeeting/meeting"
	sdkws "github.com/openimsdk/protocol/sdkws"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	Account  string `protobuf:"bytes,3,opt,name=account,proto3" json:"account"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type GetJoinTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room     string                       `protobuf:"bytes,1,opt,name=room,proto3" json:"room"`
	Identity string                       `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity"`
	MetaData *meeting.ParticipantMetaData `protobuf:"bytes,3,opt,name=metaData,proto3" json:"metaData"`
}

func (x *GetJoinTokenReq) Reset() {
	*x = GetJoinTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinTokenReq) ProtoMessage() {}

func (x *GetJoinTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinTokenReq.ProtoReflect.Descriptor instead.
func (*GetJoinTokenReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{1}
}

func (x *GetJoinTokenReq) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *GetJoinTokenReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *GetJoinTokenReq) GetMetaData() *meeting.ParticipantMetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type GetJoinTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt     string `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt"`
	LiveURL string `protobuf:"bytes,2,opt,name=liveURL,proto3" json:"liveURL"`
}

func (x *GetJoinTokenResp) Reset() {
	*x = GetJoinTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinTokenResp) ProtoMessage() {}

func (x *GetJoinTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinTokenResp.ProtoReflect.Descriptor instead.
func (*GetJoinTokenResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{2}
}

func (x *GetJoinTokenResp) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *GetJoinTokenResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

type SignalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SignalReq_Invite
	//	*SignalReq_InviteInGroup
	//	*SignalReq_Cancel
	//	*SignalReq_Accept
	//	*SignalReq_HungUp
	//	*SignalReq_Reject
	//	*SignalReq_GetTokenByRoomID
	Payload isSignalReq_Payload `protobuf_oneof:"payload"`
}

func (x *SignalReq) Reset() {
	*x = SignalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalReq) ProtoMessage() {}

func (x *SignalReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalReq.ProtoReflect.Descriptor instead.
func (*SignalReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{3}
}

func (m *SignalReq) GetPayload() isSignalReq_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SignalReq) GetInvite() *SignalInviteReq {
	if x, ok := x.GetPayload().(*SignalReq_Invite); ok {
		return x.Invite
	}
	return nil
}

func (x *SignalReq) GetInviteInGroup() *SignalInviteInGroupReq {
	if x, ok := x.GetPayload().(*SignalReq_InviteInGroup); ok {
		return x.InviteInGroup
	}
	return nil
}

func (x *SignalReq) GetCancel() *SignalCancelReq {
	if x, ok := x.GetPayload().(*SignalReq_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *SignalReq) GetAccept() *SignalAcceptReq {
	if x, ok := x.GetPayload().(*SignalReq_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *SignalReq) GetHungUp() *SignalHungUpReq {
	if x, ok := x.GetPayload().(*SignalReq_HungUp); ok {
		return x.HungUp
	}
	return nil
}

func (x *SignalReq) GetReject() *SignalRejectReq {
	if x, ok := x.GetPayload().(*SignalReq_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *SignalReq) GetGetTokenByRoomID() *SignalGetTokenByRoomIDReq {
	if x, ok := x.GetPayload().(*SignalReq_GetTokenByRoomID); ok {
		return x.GetTokenByRoomID
	}
	return nil
}

type isSignalReq_Payload interface {
	isSignalReq_Payload()
}

type SignalReq_Invite struct {
	Invite *SignalInviteReq `protobuf:"bytes,1,opt,name=invite,proto3,oneof"`
}

type SignalReq_InviteInGroup struct {
	InviteInGroup *SignalInviteInGroupReq `protobuf:"bytes,2,opt,name=inviteInGroup,proto3,oneof"`
}

type SignalReq_Cancel struct {
	Cancel *SignalCancelReq `protobuf:"bytes,3,opt,name=cancel,proto3,oneof"`
}

type SignalReq_Accept struct {
	Accept *SignalAcceptReq `protobuf:"bytes,4,opt,name=accept,proto3,oneof"`
}

type SignalReq_HungUp struct {
	HungUp *SignalHungUpReq `protobuf:"bytes,5,opt,name=hungUp,proto3,oneof"`
}

type SignalReq_Reject struct {
	Reject *SignalRejectReq `protobuf:"bytes,6,opt,name=reject,proto3,oneof"`
}

type SignalReq_GetTokenByRoomID struct {
	GetTokenByRoomID *SignalGetTokenByRoomIDReq `protobuf:"bytes,7,opt,name=getTokenByRoomID,proto3,oneof"`
}

func (*SignalReq_Invite) isSignalReq_Payload() {}

func (*SignalReq_InviteInGroup) isSignalReq_Payload() {}

func (*SignalReq_Cancel) isSignalReq_Payload() {}

func (*SignalReq_Accept) isSignalReq_Payload() {}

func (*SignalReq_HungUp) isSignalReq_Payload() {}

func (*SignalReq_Reject) isSignalReq_Payload() {}

func (*SignalReq_GetTokenByRoomID) isSignalReq_Payload() {}

type SignalSendCustomSignalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	CustomInfo string `protobuf:"bytes,2,opt,name=customInfo,proto3" json:"customInfo"`
}

func (x *SignalSendCustomSignalReq) Reset() {
	*x = SignalSendCustomSignalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSendCustomSignalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSendCustomSignalReq) ProtoMessage() {}

func (x *SignalSendCustomSignalReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSendCustomSignalReq.ProtoReflect.Descriptor instead.
func (*SignalSendCustomSignalReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{4}
}

func (x *SignalSendCustomSignalReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalSendCustomSignalReq) GetCustomInfo() string {
	if x != nil {
		return x.CustomInfo
	}
	return ""
}

type SignalSendCustomSignalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalSendCustomSignalResp) Reset() {
	*x = SignalSendCustomSignalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSendCustomSignalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSendCustomSignalResp) ProtoMessage() {}

func (x *SignalSendCustomSignalResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSendCustomSignalResp.ProtoReflect.Descriptor instead.
func (*SignalSendCustomSignalResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{5}
}

type SignalOperateStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamType string `protobuf:"bytes,1,opt,name=streamType,proto3" json:"streamType"`
	RoomID     string `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
	Mute       bool   `protobuf:"varint,4,opt,name=mute,proto3" json:"mute"`
	MuteAll    bool   `protobuf:"varint,5,opt,name=muteAll,proto3" json:"muteAll"`
}

func (x *SignalOperateStreamReq) Reset() {
	*x = SignalOperateStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalOperateStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOperateStreamReq) ProtoMessage() {}

func (x *SignalOperateStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOperateStreamReq.ProtoReflect.Descriptor instead.
func (*SignalOperateStreamReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{6}
}

func (x *SignalOperateStreamReq) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *SignalOperateStreamReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalOperateStreamReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SignalOperateStreamReq) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *SignalOperateStreamReq) GetMuteAll() bool {
	if x != nil {
		return x.MuteAll
	}
	return false
}

type SignalOperateStreamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalOperateStreamResp) Reset() {
	*x = SignalOperateStreamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalOperateStreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOperateStreamResp) ProtoMessage() {}

func (x *SignalOperateStreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOperateStreamResp.ProtoReflect.Descriptor instead.
func (*SignalOperateStreamResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{7}
}

type SignalOnStreamChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	StreamType string `protobuf:"bytes,2,opt,name=streamType,proto3" json:"streamType"`
	Mute       bool   `protobuf:"varint,3,opt,name=mute,proto3" json:"mute"`
}

func (x *SignalOnStreamChangeReq) Reset() {
	*x = SignalOnStreamChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalOnStreamChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOnStreamChangeReq) ProtoMessage() {}

func (x *SignalOnStreamChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOnStreamChangeReq.ProtoReflect.Descriptor instead.
func (*SignalOnStreamChangeReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{8}
}

func (x *SignalOnStreamChangeReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalOnStreamChangeReq) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *SignalOnStreamChangeReq) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

type SignalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SignalResp_Invite
	//	*SignalResp_InviteInGroup
	//	*SignalResp_Cancel
	//	*SignalResp_Accept
	//	*SignalResp_HungUp
	//	*SignalResp_Reject
	//	*SignalResp_GetTokenByRoomID
	Payload isSignalResp_Payload `protobuf_oneof:"payload"`
}

func (x *SignalResp) Reset() {
	*x = SignalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalResp) ProtoMessage() {}

func (x *SignalResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalResp.ProtoReflect.Descriptor instead.
func (*SignalResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{9}
}

func (m *SignalResp) GetPayload() isSignalResp_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SignalResp) GetInvite() *SignalInviteResp {
	if x, ok := x.GetPayload().(*SignalResp_Invite); ok {
		return x.Invite
	}
	return nil
}

func (x *SignalResp) GetInviteInGroup() *SignalInviteInGroupResp {
	if x, ok := x.GetPayload().(*SignalResp_InviteInGroup); ok {
		return x.InviteInGroup
	}
	return nil
}

func (x *SignalResp) GetCancel() *SignalCancelResp {
	if x, ok := x.GetPayload().(*SignalResp_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *SignalResp) GetAccept() *SignalAcceptResp {
	if x, ok := x.GetPayload().(*SignalResp_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *SignalResp) GetHungUp() *SignalHungUpResp {
	if x, ok := x.GetPayload().(*SignalResp_HungUp); ok {
		return x.HungUp
	}
	return nil
}

func (x *SignalResp) GetReject() *SignalRejectResp {
	if x, ok := x.GetPayload().(*SignalResp_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *SignalResp) GetGetTokenByRoomID() *SignalGetTokenByRoomIDResp {
	if x, ok := x.GetPayload().(*SignalResp_GetTokenByRoomID); ok {
		return x.GetTokenByRoomID
	}
	return nil
}

type isSignalResp_Payload interface {
	isSignalResp_Payload()
}

type SignalResp_Invite struct {
	Invite *SignalInviteResp `protobuf:"bytes,1,opt,name=invite,proto3,oneof"`
}

type SignalResp_InviteInGroup struct {
	InviteInGroup *SignalInviteInGroupResp `protobuf:"bytes,2,opt,name=inviteInGroup,proto3,oneof"`
}

type SignalResp_Cancel struct {
	Cancel *SignalCancelResp `protobuf:"bytes,3,opt,name=cancel,proto3,oneof"`
}

type SignalResp_Accept struct {
	Accept *SignalAcceptResp `protobuf:"bytes,4,opt,name=accept,proto3,oneof"`
}

type SignalResp_HungUp struct {
	HungUp *SignalHungUpResp `protobuf:"bytes,5,opt,name=hungUp,proto3,oneof"`
}

type SignalResp_Reject struct {
	Reject *SignalRejectResp `protobuf:"bytes,6,opt,name=reject,proto3,oneof"`
}

type SignalResp_GetTokenByRoomID struct {
	GetTokenByRoomID *SignalGetTokenByRoomIDResp `protobuf:"bytes,7,opt,name=getTokenByRoomID,proto3,oneof"`
}

func (*SignalResp_Invite) isSignalResp_Payload() {}

func (*SignalResp_InviteInGroup) isSignalResp_Payload() {}

func (*SignalResp_Cancel) isSignalResp_Payload() {}

func (*SignalResp_Accept) isSignalResp_Payload() {}

func (*SignalResp_HungUp) isSignalResp_Payload() {}

func (*SignalResp_Reject) isSignalResp_Payload() {}

func (*SignalResp_GetTokenByRoomID) isSignalResp_Payload() {}

type InvitationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviterUserID      string   `protobuf:"bytes,1,opt,name=inviterUserID,proto3" json:"inviterUserID"`
	InviteeUserIDList  []string `protobuf:"bytes,2,rep,name=inviteeUserIDList,proto3" json:"inviteeUserIDList"`
	CustomData         string   `protobuf:"bytes,3,opt,name=customData,proto3" json:"customData"`
	GroupID            string   `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID"`
	RoomID             string   `protobuf:"bytes,5,opt,name=roomID,proto3" json:"roomID"`
	Timeout            int32    `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout"`
	MediaType          string   `protobuf:"bytes,7,opt,name=mediaType,proto3" json:"mediaType"`
	PlatformID         int32    `protobuf:"varint,8,opt,name=platformID,proto3" json:"platformID"`
	SessionType        int32    `protobuf:"varint,9,opt,name=sessionType,proto3" json:"sessionType"`
	InitiateTime       int64    `protobuf:"varint,10,opt,name=initiateTime,proto3" json:"initiateTime"`
	BusyLineUserIDList []string `protobuf:"bytes,11,rep,name=busyLineUserIDList,proto3" json:"busyLineUserIDList"`
}

func (x *InvitationInfo) Reset() {
	*x = InvitationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationInfo) ProtoMessage() {}

func (x *InvitationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationInfo.ProtoReflect.Descriptor instead.
func (*InvitationInfo) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{10}
}

func (x *InvitationInfo) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

func (x *InvitationInfo) GetInviteeUserIDList() []string {
	if x != nil {
		return x.InviteeUserIDList
	}
	return nil
}

func (x *InvitationInfo) GetCustomData() string {
	if x != nil {
		return x.CustomData
	}
	return ""
}

func (x *InvitationInfo) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *InvitationInfo) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *InvitationInfo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *InvitationInfo) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *InvitationInfo) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *InvitationInfo) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *InvitationInfo) GetInitiateTime() int64 {
	if x != nil {
		return x.InitiateTime
	}
	return 0
}

func (x *InvitationInfo) GetBusyLineUserIDList() []string {
	if x != nil {
		return x.BusyLineUserIDList
	}
	return nil
}

type SignalInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo              `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo       `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant     *meeting.ParticipantMetaData `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	UserID          string                       `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalInviteReq) Reset() {
	*x = SignalInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteReq) ProtoMessage() {}

func (x *SignalInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteReq.ProtoReflect.Descriptor instead.
func (*SignalInviteReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{11}
}

func (x *SignalInviteReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalInviteReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalInviteReq) GetParticipant() *meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalInviteReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalInviteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RoomID             string   `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	LiveURL            string   `protobuf:"bytes,3,opt,name=liveURL,proto3" json:"liveURL"`
	BusyLineUserIDList []string `protobuf:"bytes,4,rep,name=busyLineUserIDList,proto3" json:"busyLineUserIDList"`
}

func (x *SignalInviteResp) Reset() {
	*x = SignalInviteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalInviteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteResp) ProtoMessage() {}

func (x *SignalInviteResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteResp.ProtoReflect.Descriptor instead.
func (*SignalInviteResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{12}
}

func (x *SignalInviteResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalInviteResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalInviteResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

func (x *SignalInviteResp) GetBusyLineUserIDList() []string {
	if x != nil {
		return x.BusyLineUserIDList
	}
	return nil
}

type SignalInviteInGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo              `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo       `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant     *meeting.ParticipantMetaData `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	UserID          string                       `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalInviteInGroupReq) Reset() {
	*x = SignalInviteInGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalInviteInGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteInGroupReq) ProtoMessage() {}

func (x *SignalInviteInGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteInGroupReq.ProtoReflect.Descriptor instead.
func (*SignalInviteInGroupReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{13}
}

func (x *SignalInviteInGroupReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalInviteInGroupReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalInviteInGroupReq) GetParticipant() *meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalInviteInGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalInviteInGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RoomID             string   `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	LiveURL            string   `protobuf:"bytes,3,opt,name=liveURL,proto3" json:"liveURL"`
	BusyLineUserIDList []string `protobuf:"bytes,4,rep,name=busyLineUserIDList,proto3" json:"busyLineUserIDList"`
}

func (x *SignalInviteInGroupResp) Reset() {
	*x = SignalInviteInGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalInviteInGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteInGroupResp) ProtoMessage() {}

func (x *SignalInviteInGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteInGroupResp.ProtoReflect.Descriptor instead.
func (*SignalInviteInGroupResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{14}
}

func (x *SignalInviteInGroupResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalInviteInGroupResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalInviteInGroupResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

func (x *SignalInviteInGroupResp) GetBusyLineUserIDList() []string {
	if x != nil {
		return x.BusyLineUserIDList
	}
	return nil
}

type SignalCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo              `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo       `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant     *meeting.ParticipantMetaData `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	UserID          string                       `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalCancelReq) Reset() {
	*x = SignalCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalCancelReq) ProtoMessage() {}

func (x *SignalCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalCancelReq.ProtoReflect.Descriptor instead.
func (*SignalCancelReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{15}
}

func (x *SignalCancelReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalCancelReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalCancelReq) GetParticipant() *meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalCancelReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalCancelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalCancelResp) Reset() {
	*x = SignalCancelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalCancelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalCancelResp) ProtoMessage() {}

func (x *SignalCancelResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalCancelResp.ProtoReflect.Descriptor instead.
func (*SignalCancelResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{16}
}

type SignalAcceptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation       *InvitationInfo              `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo  *sdkws.OfflinePushInfo       `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant      *meeting.ParticipantMetaData `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	OpUserPlatformID int32                        `protobuf:"varint,4,opt,name=opUserPlatformID,proto3" json:"opUserPlatformID"`
	UserID           string                       `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalAcceptReq) Reset() {
	*x = SignalAcceptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalAcceptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalAcceptReq) ProtoMessage() {}

func (x *SignalAcceptReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalAcceptReq.ProtoReflect.Descriptor instead.
func (*SignalAcceptReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{17}
}

func (x *SignalAcceptReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalAcceptReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalAcceptReq) GetParticipant() *meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalAcceptReq) GetOpUserPlatformID() int32 {
	if x != nil {
		return x.OpUserPlatformID
	}
	return 0
}

func (x *SignalAcceptReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalAcceptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RoomID  string `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	LiveURL string `protobuf:"bytes,3,opt,name=liveURL,proto3" json:"liveURL"`
}

func (x *SignalAcceptResp) Reset() {
	*x = SignalAcceptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalAcceptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalAcceptResp) ProtoMessage() {}

func (x *SignalAcceptResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalAcceptResp.ProtoReflect.Descriptor instead.
func (*SignalAcceptResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{18}
}

func (x *SignalAcceptResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalAcceptResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalAcceptResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

type SignalHungUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	UserID          string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalHungUpReq) Reset() {
	*x = SignalHungUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalHungUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalHungUpReq) ProtoMessage() {}

func (x *SignalHungUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalHungUpReq.ProtoReflect.Descriptor instead.
func (*SignalHungUpReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{19}
}

func (x *SignalHungUpReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalHungUpReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalHungUpReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalHungUpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalHungUpResp) Reset() {
	*x = SignalHungUpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalHungUpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalHungUpResp) ProtoMessage() {}

func (x *SignalHungUpResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalHungUpResp.ProtoReflect.Descriptor instead.
func (*SignalHungUpResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{20}
}

type SignalRejectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation       *InvitationInfo              `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo  *sdkws.OfflinePushInfo       `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant      *meeting.ParticipantMetaData `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	OpUserPlatformID int32                        `protobuf:"varint,4,opt,name=opUserPlatformID,proto3" json:"opUserPlatformID"`
	UserID           string                       `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalRejectReq) Reset() {
	*x = SignalRejectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalRejectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRejectReq) ProtoMessage() {}

func (x *SignalRejectReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRejectReq.ProtoReflect.Descriptor instead.
func (*SignalRejectReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{21}
}

func (x *SignalRejectReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalRejectReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalRejectReq) GetParticipant() *meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalRejectReq) GetOpUserPlatformID() int32 {
	if x != nil {
		return x.OpUserPlatformID
	}
	return 0
}

func (x *SignalRejectReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalRejectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalRejectResp) Reset() {
	*x = SignalRejectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalRejectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRejectResp) ProtoMessage() {}

func (x *SignalRejectResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRejectResp.ProtoReflect.Descriptor instead.
func (*SignalRejectResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{22}
}

type SignalGetRoomByGroupIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
}

func (x *SignalGetRoomByGroupIDReq) Reset() {
	*x = SignalGetRoomByGroupIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetRoomByGroupIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomByGroupIDReq) ProtoMessage() {}

func (x *SignalGetRoomByGroupIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomByGroupIDReq.ProtoReflect.Descriptor instead.
func (*SignalGetRoomByGroupIDReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{23}
}

func (x *SignalGetRoomByGroupIDReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type SignalGetRoomByGroupIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation  *InvitationInfo                `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	Participant []*meeting.ParticipantMetaData `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant"`
	RoomID      string                         `protobuf:"bytes,3,opt,name=roomID,proto3" json:"roomID"`
}

func (x *SignalGetRoomByGroupIDResp) Reset() {
	*x = SignalGetRoomByGroupIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetRoomByGroupIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomByGroupIDResp) ProtoMessage() {}

func (x *SignalGetRoomByGroupIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomByGroupIDResp.ProtoReflect.Descriptor instead.
func (*SignalGetRoomByGroupIDResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{24}
}

func (x *SignalGetRoomByGroupIDResp) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalGetRoomByGroupIDResp) GetParticipant() []*meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalGetRoomByGroupIDResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type SignalOnRoomParticipantConnectedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation  *InvitationInfo                `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	Participant []*meeting.ParticipantMetaData `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant"`
	GroupID     string                         `protobuf:"bytes,3,opt,name=groupID,proto3" json:"groupID"`
}

func (x *SignalOnRoomParticipantConnectedReq) Reset() {
	*x = SignalOnRoomParticipantConnectedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalOnRoomParticipantConnectedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOnRoomParticipantConnectedReq) ProtoMessage() {}

func (x *SignalOnRoomParticipantConnectedReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOnRoomParticipantConnectedReq.ProtoReflect.Descriptor instead.
func (*SignalOnRoomParticipantConnectedReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{25}
}

func (x *SignalOnRoomParticipantConnectedReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalOnRoomParticipantConnectedReq) GetParticipant() []*meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalOnRoomParticipantConnectedReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type SignalOnRoomParticipantDisconnectedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation  *InvitationInfo                `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	Participant []*meeting.ParticipantMetaData `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant"`
	GroupID     string                         `protobuf:"bytes,3,opt,name=groupID,proto3" json:"groupID"`
}

func (x *SignalOnRoomParticipantDisconnectedReq) Reset() {
	*x = SignalOnRoomParticipantDisconnectedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalOnRoomParticipantDisconnectedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOnRoomParticipantDisconnectedReq) ProtoMessage() {}

func (x *SignalOnRoomParticipantDisconnectedReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOnRoomParticipantDisconnectedReq.ProtoReflect.Descriptor instead.
func (*SignalOnRoomParticipantDisconnectedReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{26}
}

func (x *SignalOnRoomParticipantDisconnectedReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalOnRoomParticipantDisconnectedReq) GetParticipant() []*meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalOnRoomParticipantDisconnectedReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type SignalGetTokenByRoomIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID      string                       `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	Participant *meeting.ParticipantMetaData `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant"`
	UserID      string                       `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalGetTokenByRoomIDReq) Reset() {
	*x = SignalGetTokenByRoomIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetTokenByRoomIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetTokenByRoomIDReq) ProtoMessage() {}

func (x *SignalGetTokenByRoomIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetTokenByRoomIDReq.ProtoReflect.Descriptor instead.
func (*SignalGetTokenByRoomIDReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{27}
}

func (x *SignalGetTokenByRoomIDReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalGetTokenByRoomIDReq) GetParticipant() *meeting.ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalGetTokenByRoomIDReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalGetTokenByRoomIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	LiveURL string `protobuf:"bytes,2,opt,name=liveURL,proto3" json:"liveURL"`
}

func (x *SignalGetTokenByRoomIDResp) Reset() {
	*x = SignalGetTokenByRoomIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetTokenByRoomIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetTokenByRoomIDResp) ProtoMessage() {}

func (x *SignalGetTokenByRoomIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetTokenByRoomIDResp.ProtoReflect.Descriptor instead.
func (*SignalGetTokenByRoomIDResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{28}
}

func (x *SignalGetTokenByRoomIDResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalGetTokenByRoomIDResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

type SignalMessageAssembleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalReq *SignalReq `protobuf:"bytes,1,opt,name=signalReq,proto3" json:"signalReq"`
}

func (x *SignalMessageAssembleReq) Reset() {
	*x = SignalMessageAssembleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalMessageAssembleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalMessageAssembleReq) ProtoMessage() {}

func (x *SignalMessageAssembleReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalMessageAssembleReq.ProtoReflect.Descriptor instead.
func (*SignalMessageAssembleReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{29}
}

func (x *SignalMessageAssembleReq) GetSignalReq() *SignalReq {
	if x != nil {
		return x.SignalReq
	}
	return nil
}

type SignalMessageAssembleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalResp *SignalResp    `protobuf:"bytes,1,opt,name=signalResp,proto3" json:"signalResp"`
	MsgData    *sdkws.MsgData `protobuf:"bytes,2,opt,name=msgData,proto3" json:"msgData"`
}

func (x *SignalMessageAssembleResp) Reset() {
	*x = SignalMessageAssembleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalMessageAssembleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalMessageAssembleResp) ProtoMessage() {}

func (x *SignalMessageAssembleResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalMessageAssembleResp.ProtoReflect.Descriptor instead.
func (*SignalMessageAssembleResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{30}
}

func (x *SignalMessageAssembleResp) GetSignalResp() *SignalResp {
	if x != nil {
		return x.SignalResp
	}
	return nil
}

func (x *SignalMessageAssembleResp) GetMsgData() *sdkws.MsgData {
	if x != nil {
		return x.MsgData
	}
	return nil
}

type SignalGetRoomsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomIDs []string `protobuf:"bytes,1,rep,name=roomIDs,proto3" json:"roomIDs"`
}

func (x *SignalGetRoomsReq) Reset() {
	*x = SignalGetRoomsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetRoomsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomsReq) ProtoMessage() {}

func (x *SignalGetRoomsReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomsReq.ProtoReflect.Descriptor instead.
func (*SignalGetRoomsReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{31}
}

func (x *SignalGetRoomsReq) GetRoomIDs() []string {
	if x != nil {
		return x.RoomIDs
	}
	return nil
}

type SignalGetRoomsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomList []*SignalGetRoomByGroupIDResp `protobuf:"bytes,1,rep,name=roomList,proto3" json:"roomList"`
}

func (x *SignalGetRoomsResp) Reset() {
	*x = SignalGetRoomsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGetRoomsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomsResp) ProtoMessage() {}

func (x *SignalGetRoomsResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomsResp.ProtoReflect.Descriptor instead.
func (*SignalGetRoomsResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{32}
}

func (x *SignalGetRoomsResp) GetRoomList() []*SignalGetRoomByGroupIDResp {
	if x != nil {
		return x.RoomList
	}
	return nil
}

type GetSignalInvitationInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
}

func (x *GetSignalInvitationInfoReq) Reset() {
	*x = GetSignalInvitationInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalInvitationInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoReq) ProtoMessage() {}

func (x *GetSignalInvitationInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoReq.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{33}
}

func (x *GetSignalInvitationInfoReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type GetSignalInvitationInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationInfo  *InvitationInfo        `protobuf:"bytes,1,opt,name=invitationInfo,proto3" json:"invitationInfo"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
}

func (x *GetSignalInvitationInfoResp) Reset() {
	*x = GetSignalInvitationInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalInvitationInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoResp) ProtoMessage() {}

func (x *GetSignalInvitationInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoResp.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{34}
}

func (x *GetSignalInvitationInfoResp) GetInvitationInfo() *InvitationInfo {
	if x != nil {
		return x.InvitationInfo
	}
	return nil
}

func (x *GetSignalInvitationInfoResp) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

type GetSignalInvitationInfoStartAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
}

func (x *GetSignalInvitationInfoStartAppReq) Reset() {
	*x = GetSignalInvitationInfoStartAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalInvitationInfoStartAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoStartAppReq) ProtoMessage() {}

func (x *GetSignalInvitationInfoStartAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoStartAppReq.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoStartAppReq) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{35}
}

func (x *GetSignalInvitationInfoStartAppReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetSignalInvitationInfoStartAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
}

func (x *GetSignalInvitationInfoStartAppResp) Reset() {
	*x = GetSignalInvitationInfoStartAppResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalInvitationInfoStartAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoStartAppResp) ProtoMessage() {}

func (x *GetSignalInvitationInfoStartAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoStartAppResp.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoStartAppResp) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{36}
}

func (x *GetSignalInvitationInfoStartAppResp) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *GetSignalInvitationInfoStartAppResp) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

type SignalUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	Status   int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
}

func (x *SignalUser) Reset() {
	*x = SignalUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUser) ProtoMessage() {}

func (x *SignalUser) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUser.ProtoReflect.Descriptor instead.
func (*SignalUser) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{37}
}

func (x *SignalUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SignalUser) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SignalUser) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// add for import user info begin{
type UserBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	NickName string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName"`
}

func (x *UserBaseInfo) Reset() {
	*x = UserBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openmeeting_signal_signal_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfo) ProtoMessage() {}

func (x *UserBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openmeeting_signal_signal_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfo.ProtoReflect.Descriptor instead.
func (*UserBaseInfo) Descriptor() ([]byte, []int) {
	return file_openmeeting_signal_signal_proto_rawDescGZIP(), []int{38}
}

func (x *UserBaseInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserBaseInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

var File_openmeeting_signal_signal_proto protoreflect.FileDescriptor

var file_openmeeting_signal_signal_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x22,
	0x82, 0x04, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a,
	0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3d, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x3d, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3d,
	0x0a, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x12, 0x3d, 0x0a,
	0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x10,
	0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x22, 0x19, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65, 0x0a, 0x17, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75,
	0x74, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3e, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x53, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06,
	0x68, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x84, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69,
	0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x10,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x16, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x5a, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x22, 0xb6,
	0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0xae, 0x02, 0x0a, 0x0f,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x35, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0xcf,
	0x01, 0x0a, 0x23, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x22, 0xd2, 0x01, 0x0a, 0x26, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x4c, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x57, 0x0a,
	0x18, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x44, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0xb2, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x3c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xb2, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0xe2, 0x05, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x74, 0x0a,
	0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x16,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_openmeeting_signal_signal_proto_rawDescOnce sync.Once
	file_openmeeting_signal_signal_proto_rawDescData = file_openmeeting_signal_signal_proto_rawDesc
)

func file_openmeeting_signal_signal_proto_rawDescGZIP() []byte {
	file_openmeeting_signal_signal_proto_rawDescOnce.Do(func() {
		file_openmeeting_signal_signal_proto_rawDescData = protoimpl.X.CompressGZIP(file_openmeeting_signal_signal_proto_rawDescData)
	})
	return file_openmeeting_signal_signal_proto_rawDescData
}

var file_openmeeting_signal_signal_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_openmeeting_signal_signal_proto_goTypes = []interface{}{
	(*UserInfo)(nil),                               // 0: openmeeting.signal.UserInfo
	(*GetJoinTokenReq)(nil),                        // 1: openmeeting.signal.GetJoinTokenReq
	(*GetJoinTokenResp)(nil),                       // 2: openmeeting.signal.GetJoinTokenResp
	(*SignalReq)(nil),                              // 3: openmeeting.signal.SignalReq
	(*SignalSendCustomSignalReq)(nil),              // 4: openmeeting.signal.SignalSendCustomSignalReq
	(*SignalSendCustomSignalResp)(nil),             // 5: openmeeting.signal.SignalSendCustomSignalResp
	(*SignalOperateStreamReq)(nil),                 // 6: openmeeting.signal.SignalOperateStreamReq
	(*SignalOperateStreamResp)(nil),                // 7: openmeeting.signal.SignalOperateStreamResp
	(*SignalOnStreamChangeReq)(nil),                // 8: openmeeting.signal.SignalOnStreamChangeReq
	(*SignalResp)(nil),                             // 9: openmeeting.signal.SignalResp
	(*InvitationInfo)(nil),                         // 10: openmeeting.signal.InvitationInfo
	(*SignalInviteReq)(nil),                        // 11: openmeeting.signal.SignalInviteReq
	(*SignalInviteResp)(nil),                       // 12: openmeeting.signal.SignalInviteResp
	(*SignalInviteInGroupReq)(nil),                 // 13: openmeeting.signal.SignalInviteInGroupReq
	(*SignalInviteInGroupResp)(nil),                // 14: openmeeting.signal.SignalInviteInGroupResp
	(*SignalCancelReq)(nil),                        // 15: openmeeting.signal.SignalCancelReq
	(*SignalCancelResp)(nil),                       // 16: openmeeting.signal.SignalCancelResp
	(*SignalAcceptReq)(nil),                        // 17: openmeeting.signal.SignalAcceptReq
	(*SignalAcceptResp)(nil),                       // 18: openmeeting.signal.SignalAcceptResp
	(*SignalHungUpReq)(nil),                        // 19: openmeeting.signal.SignalHungUpReq
	(*SignalHungUpResp)(nil),                       // 20: openmeeting.signal.SignalHungUpResp
	(*SignalRejectReq)(nil),                        // 21: openmeeting.signal.SignalRejectReq
	(*SignalRejectResp)(nil),                       // 22: openmeeting.signal.SignalRejectResp
	(*SignalGetRoomByGroupIDReq)(nil),              // 23: openmeeting.signal.SignalGetRoomByGroupIDReq
	(*SignalGetRoomByGroupIDResp)(nil),             // 24: openmeeting.signal.SignalGetRoomByGroupIDResp
	(*SignalOnRoomParticipantConnectedReq)(nil),    // 25: openmeeting.signal.SignalOnRoomParticipantConnectedReq
	(*SignalOnRoomParticipantDisconnectedReq)(nil), // 26: openmeeting.signal.SignalOnRoomParticipantDisconnectedReq
	(*SignalGetTokenByRoomIDReq)(nil),              // 27: openmeeting.signal.SignalGetTokenByRoomIDReq
	(*SignalGetTokenByRoomIDResp)(nil),             // 28: openmeeting.signal.SignalGetTokenByRoomIDResp
	(*SignalMessageAssembleReq)(nil),               // 29: openmeeting.signal.SignalMessageAssembleReq
	(*SignalMessageAssembleResp)(nil),              // 30: openmeeting.signal.SignalMessageAssembleResp
	(*SignalGetRoomsReq)(nil),                      // 31: openmeeting.signal.SignalGetRoomsReq
	(*SignalGetRoomsResp)(nil),                     // 32: openmeeting.signal.SignalGetRoomsResp
	(*GetSignalInvitationInfoReq)(nil),             // 33: openmeeting.signal.GetSignalInvitationInfoReq
	(*GetSignalInvitationInfoResp)(nil),            // 34: openmeeting.signal.GetSignalInvitationInfoResp
	(*GetSignalInvitationInfoStartAppReq)(nil),     // 35: openmeeting.signal.GetSignalInvitationInfoStartAppReq
	(*GetSignalInvitationInfoStartAppResp)(nil),    // 36: openmeeting.signal.GetSignalInvitationInfoStartAppResp
	(*SignalUser)(nil),                             // 37: openmeeting.signal.SignalUser
	(*UserBaseInfo)(nil),                           // 38: openmeeting.signal.UserBaseInfo
	(*meeting.ParticipantMetaData)(nil),            // 39: openmeeting.meeting.ParticipantMetaData
	(*sdkws.OfflinePushInfo)(nil),                  // 40: openim.sdkws.OfflinePushInfo
	(*sdkws.MsgData)(nil),                          // 41: openim.sdkws.MsgData
}
var file_openmeeting_signal_signal_proto_depIdxs = []int32{
	39, // 0: openmeeting.signal.GetJoinTokenReq.metaData:type_name -> openmeeting.meeting.ParticipantMetaData
	11, // 1: openmeeting.signal.SignalReq.invite:type_name -> openmeeting.signal.SignalInviteReq
	13, // 2: openmeeting.signal.SignalReq.inviteInGroup:type_name -> openmeeting.signal.SignalInviteInGroupReq
	15, // 3: openmeeting.signal.SignalReq.cancel:type_name -> openmeeting.signal.SignalCancelReq
	17, // 4: openmeeting.signal.SignalReq.accept:type_name -> openmeeting.signal.SignalAcceptReq
	19, // 5: openmeeting.signal.SignalReq.hungUp:type_name -> openmeeting.signal.SignalHungUpReq
	21, // 6: openmeeting.signal.SignalReq.reject:type_name -> openmeeting.signal.SignalRejectReq
	27, // 7: openmeeting.signal.SignalReq.getTokenByRoomID:type_name -> openmeeting.signal.SignalGetTokenByRoomIDReq
	12, // 8: openmeeting.signal.SignalResp.invite:type_name -> openmeeting.signal.SignalInviteResp
	14, // 9: openmeeting.signal.SignalResp.inviteInGroup:type_name -> openmeeting.signal.SignalInviteInGroupResp
	16, // 10: openmeeting.signal.SignalResp.cancel:type_name -> openmeeting.signal.SignalCancelResp
	18, // 11: openmeeting.signal.SignalResp.accept:type_name -> openmeeting.signal.SignalAcceptResp
	20, // 12: openmeeting.signal.SignalResp.hungUp:type_name -> openmeeting.signal.SignalHungUpResp
	22, // 13: openmeeting.signal.SignalResp.reject:type_name -> openmeeting.signal.SignalRejectResp
	28, // 14: openmeeting.signal.SignalResp.getTokenByRoomID:type_name -> openmeeting.signal.SignalGetTokenByRoomIDResp
	10, // 15: openmeeting.signal.SignalInviteReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 16: openmeeting.signal.SignalInviteReq.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	39, // 17: openmeeting.signal.SignalInviteReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 18: openmeeting.signal.SignalInviteInGroupReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 19: openmeeting.signal.SignalInviteInGroupReq.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	39, // 20: openmeeting.signal.SignalInviteInGroupReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 21: openmeeting.signal.SignalCancelReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 22: openmeeting.signal.SignalCancelReq.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	39, // 23: openmeeting.signal.SignalCancelReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 24: openmeeting.signal.SignalAcceptReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 25: openmeeting.signal.SignalAcceptReq.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	39, // 26: openmeeting.signal.SignalAcceptReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 27: openmeeting.signal.SignalHungUpReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 28: openmeeting.signal.SignalHungUpReq.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	10, // 29: openmeeting.signal.SignalRejectReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 30: openmeeting.signal.SignalRejectReq.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	39, // 31: openmeeting.signal.SignalRejectReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 32: openmeeting.signal.SignalGetRoomByGroupIDResp.invitation:type_name -> openmeeting.signal.InvitationInfo
	39, // 33: openmeeting.signal.SignalGetRoomByGroupIDResp.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 34: openmeeting.signal.SignalOnRoomParticipantConnectedReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	39, // 35: openmeeting.signal.SignalOnRoomParticipantConnectedReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	10, // 36: openmeeting.signal.SignalOnRoomParticipantDisconnectedReq.invitation:type_name -> openmeeting.signal.InvitationInfo
	39, // 37: openmeeting.signal.SignalOnRoomParticipantDisconnectedReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	39, // 38: openmeeting.signal.SignalGetTokenByRoomIDReq.participant:type_name -> openmeeting.meeting.ParticipantMetaData
	3,  // 39: openmeeting.signal.SignalMessageAssembleReq.signalReq:type_name -> openmeeting.signal.SignalReq
	9,  // 40: openmeeting.signal.SignalMessageAssembleResp.signalResp:type_name -> openmeeting.signal.SignalResp
	41, // 41: openmeeting.signal.SignalMessageAssembleResp.msgData:type_name -> openim.sdkws.MsgData
	24, // 42: openmeeting.signal.SignalGetRoomsResp.roomList:type_name -> openmeeting.signal.SignalGetRoomByGroupIDResp
	10, // 43: openmeeting.signal.GetSignalInvitationInfoResp.invitationInfo:type_name -> openmeeting.signal.InvitationInfo
	40, // 44: openmeeting.signal.GetSignalInvitationInfoResp.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	10, // 45: openmeeting.signal.GetSignalInvitationInfoStartAppResp.invitation:type_name -> openmeeting.signal.InvitationInfo
	40, // 46: openmeeting.signal.GetSignalInvitationInfoStartAppResp.offlinePushInfo:type_name -> openim.sdkws.OfflinePushInfo
	29, // 47: openmeeting.signal.Signal.SignalMessageAssemble:input_type -> openmeeting.signal.SignalMessageAssembleReq
	23, // 48: openmeeting.signal.Signal.SignalGetRoomByGroupID:input_type -> openmeeting.signal.SignalGetRoomByGroupIDReq
	27, // 49: openmeeting.signal.Signal.SignalGetTokenByRoomID:input_type -> openmeeting.signal.SignalGetTokenByRoomIDReq
	31, // 50: openmeeting.signal.Signal.SignalGetRooms:input_type -> openmeeting.signal.SignalGetRoomsReq
	33, // 51: openmeeting.signal.Signal.GetSignalInvitationInfo:input_type -> openmeeting.signal.GetSignalInvitationInfoReq
	35, // 52: openmeeting.signal.Signal.GetSignalInvitationInfoStartApp:input_type -> openmeeting.signal.GetSignalInvitationInfoStartAppReq
	30, // 53: openmeeting.signal.Signal.SignalMessageAssemble:output_type -> openmeeting.signal.SignalMessageAssembleResp
	24, // 54: openmeeting.signal.Signal.SignalGetRoomByGroupID:output_type -> openmeeting.signal.SignalGetRoomByGroupIDResp
	28, // 55: openmeeting.signal.Signal.SignalGetTokenByRoomID:output_type -> openmeeting.signal.SignalGetTokenByRoomIDResp
	32, // 56: openmeeting.signal.Signal.SignalGetRooms:output_type -> openmeeting.signal.SignalGetRoomsResp
	34, // 57: openmeeting.signal.Signal.GetSignalInvitationInfo:output_type -> openmeeting.signal.GetSignalInvitationInfoResp
	36, // 58: openmeeting.signal.Signal.GetSignalInvitationInfoStartApp:output_type -> openmeeting.signal.GetSignalInvitationInfoStartAppResp
	53, // [53:59] is the sub-list for method output_type
	47, // [47:53] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_openmeeting_signal_signal_proto_init() }
func file_openmeeting_signal_signal_proto_init() {
	if File_openmeeting_signal_signal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openmeeting_signal_signal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSendCustomSignalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSendCustomSignalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalOperateStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalOperateStreamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalOnStreamChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalInviteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalInviteInGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalInviteInGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalCancelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalAcceptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalAcceptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalHungUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalHungUpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalRejectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalRejectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetRoomByGroupIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetRoomByGroupIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalOnRoomParticipantConnectedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalOnRoomParticipantDisconnectedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetTokenByRoomIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetTokenByRoomIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalMessageAssembleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalMessageAssembleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetRoomsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGetRoomsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalInvitationInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalInvitationInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalInvitationInfoStartAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalInvitationInfoStartAppResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openmeeting_signal_signal_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openmeeting_signal_signal_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SignalReq_Invite)(nil),
		(*SignalReq_InviteInGroup)(nil),
		(*SignalReq_Cancel)(nil),
		(*SignalReq_Accept)(nil),
		(*SignalReq_HungUp)(nil),
		(*SignalReq_Reject)(nil),
		(*SignalReq_GetTokenByRoomID)(nil),
	}
	file_openmeeting_signal_signal_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SignalResp_Invite)(nil),
		(*SignalResp_InviteInGroup)(nil),
		(*SignalResp_Cancel)(nil),
		(*SignalResp_Accept)(nil),
		(*SignalResp_HungUp)(nil),
		(*SignalResp_Reject)(nil),
		(*SignalResp_GetTokenByRoomID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openmeeting_signal_signal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openmeeting_signal_signal_proto_goTypes,
		DependencyIndexes: file_openmeeting_signal_signal_proto_depIdxs,
		MessageInfos:      file_openmeeting_signal_signal_proto_msgTypes,
	}.Build()
	File_openmeeting_signal_signal_proto = out.File
	file_openmeeting_signal_signal_proto_rawDesc = nil
	file_openmeeting_signal_signal_proto_goTypes = nil
	file_openmeeting_signal_signal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SignalClient is the client API for Signal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignalClient interface {
	SignalMessageAssemble(ctx context.Context, in *SignalMessageAssembleReq, opts ...grpc.CallOption) (*SignalMessageAssembleResp, error)
	SignalGetRoomByGroupID(ctx context.Context, in *SignalGetRoomByGroupIDReq, opts ...grpc.CallOption) (*SignalGetRoomByGroupIDResp, error)
	SignalGetTokenByRoomID(ctx context.Context, in *SignalGetTokenByRoomIDReq, opts ...grpc.CallOption) (*SignalGetTokenByRoomIDResp, error)
	SignalGetRooms(ctx context.Context, in *SignalGetRoomsReq, opts ...grpc.CallOption) (*SignalGetRoomsResp, error)
	GetSignalInvitationInfo(ctx context.Context, in *GetSignalInvitationInfoReq, opts ...grpc.CallOption) (*GetSignalInvitationInfoResp, error)
	GetSignalInvitationInfoStartApp(ctx context.Context, in *GetSignalInvitationInfoStartAppReq, opts ...grpc.CallOption) (*GetSignalInvitationInfoStartAppResp, error)
}

type signalClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalClient(cc grpc.ClientConnInterface) SignalClient {
	return &signalClient{cc}
}

func (c *signalClient) SignalMessageAssemble(ctx context.Context, in *SignalMessageAssembleReq, opts ...grpc.CallOption) (*SignalMessageAssembleResp, error) {
	out := new(SignalMessageAssembleResp)
	err := c.cc.Invoke(ctx, "/openmeeting.signal.Signal/SignalMessageAssemble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalClient) SignalGetRoomByGroupID(ctx context.Context, in *SignalGetRoomByGroupIDReq, opts ...grpc.CallOption) (*SignalGetRoomByGroupIDResp, error) {
	out := new(SignalGetRoomByGroupIDResp)
	err := c.cc.Invoke(ctx, "/openmeeting.signal.Signal/SignalGetRoomByGroupID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalClient) SignalGetTokenByRoomID(ctx context.Context, in *SignalGetTokenByRoomIDReq, opts ...grpc.CallOption) (*SignalGetTokenByRoomIDResp, error) {
	out := new(SignalGetTokenByRoomIDResp)
	err := c.cc.Invoke(ctx, "/openmeeting.signal.Signal/SignalGetTokenByRoomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalClient) SignalGetRooms(ctx context.Context, in *SignalGetRoomsReq, opts ...grpc.CallOption) (*SignalGetRoomsResp, error) {
	out := new(SignalGetRoomsResp)
	err := c.cc.Invoke(ctx, "/openmeeting.signal.Signal/SignalGetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalClient) GetSignalInvitationInfo(ctx context.Context, in *GetSignalInvitationInfoReq, opts ...grpc.CallOption) (*GetSignalInvitationInfoResp, error) {
	out := new(GetSignalInvitationInfoResp)
	err := c.cc.Invoke(ctx, "/openmeeting.signal.Signal/GetSignalInvitationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalClient) GetSignalInvitationInfoStartApp(ctx context.Context, in *GetSignalInvitationInfoStartAppReq, opts ...grpc.CallOption) (*GetSignalInvitationInfoStartAppResp, error) {
	out := new(GetSignalInvitationInfoStartAppResp)
	err := c.cc.Invoke(ctx, "/openmeeting.signal.Signal/GetSignalInvitationInfoStartApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalServer is the server API for Signal service.
type SignalServer interface {
	SignalMessageAssemble(context.Context, *SignalMessageAssembleReq) (*SignalMessageAssembleResp, error)
	SignalGetRoomByGroupID(context.Context, *SignalGetRoomByGroupIDReq) (*SignalGetRoomByGroupIDResp, error)
	SignalGetTokenByRoomID(context.Context, *SignalGetTokenByRoomIDReq) (*SignalGetTokenByRoomIDResp, error)
	SignalGetRooms(context.Context, *SignalGetRoomsReq) (*SignalGetRoomsResp, error)
	GetSignalInvitationInfo(context.Context, *GetSignalInvitationInfoReq) (*GetSignalInvitationInfoResp, error)
	GetSignalInvitationInfoStartApp(context.Context, *GetSignalInvitationInfoStartAppReq) (*GetSignalInvitationInfoStartAppResp, error)
}

// UnimplementedSignalServer can be embedded to have forward compatible implementations.
type UnimplementedSignalServer struct {
}

func (*UnimplementedSignalServer) SignalMessageAssemble(context.Context, *SignalMessageAssembleReq) (*SignalMessageAssembleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalMessageAssemble not implemented")
}
func (*UnimplementedSignalServer) SignalGetRoomByGroupID(context.Context, *SignalGetRoomByGroupIDReq) (*SignalGetRoomByGroupIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalGetRoomByGroupID not implemented")
}
func (*UnimplementedSignalServer) SignalGetTokenByRoomID(context.Context, *SignalGetTokenByRoomIDReq) (*SignalGetTokenByRoomIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalGetTokenByRoomID not implemented")
}
func (*UnimplementedSignalServer) SignalGetRooms(context.Context, *SignalGetRoomsReq) (*SignalGetRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalGetRooms not implemented")
}
func (*UnimplementedSignalServer) GetSignalInvitationInfo(context.Context, *GetSignalInvitationInfoReq) (*GetSignalInvitationInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignalInvitationInfo not implemented")
}
func (*UnimplementedSignalServer) GetSignalInvitationInfoStartApp(context.Context, *GetSignalInvitationInfoStartAppReq) (*GetSignalInvitationInfoStartAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignalInvitationInfoStartApp not implemented")
}

func RegisterSignalServer(s *grpc.Server, srv SignalServer) {
	s.RegisterService(&_Signal_serviceDesc, srv)
}

func _Signal_SignalMessageAssemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalMessageAssembleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).SignalMessageAssemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.signal.Signal/SignalMessageAssemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).SignalMessageAssemble(ctx, req.(*SignalMessageAssembleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signal_SignalGetRoomByGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalGetRoomByGroupIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).SignalGetRoomByGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.signal.Signal/SignalGetRoomByGroupID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).SignalGetRoomByGroupID(ctx, req.(*SignalGetRoomByGroupIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signal_SignalGetTokenByRoomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalGetTokenByRoomIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).SignalGetTokenByRoomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.signal.Signal/SignalGetTokenByRoomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).SignalGetTokenByRoomID(ctx, req.(*SignalGetTokenByRoomIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signal_SignalGetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalGetRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).SignalGetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.signal.Signal/SignalGetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).SignalGetRooms(ctx, req.(*SignalGetRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signal_GetSignalInvitationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignalInvitationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).GetSignalInvitationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.signal.Signal/GetSignalInvitationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).GetSignalInvitationInfo(ctx, req.(*GetSignalInvitationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signal_GetSignalInvitationInfoStartApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignalInvitationInfoStartAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).GetSignalInvitationInfoStartApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.signal.Signal/GetSignalInvitationInfoStartApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).GetSignalInvitationInfoStartApp(ctx, req.(*GetSignalInvitationInfoStartAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmeeting.signal.Signal",
	HandlerType: (*SignalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignalMessageAssemble",
			Handler:    _Signal_SignalMessageAssemble_Handler,
		},
		{
			MethodName: "SignalGetRoomByGroupID",
			Handler:    _Signal_SignalGetRoomByGroupID_Handler,
		},
		{
			MethodName: "SignalGetTokenByRoomID",
			Handler:    _Signal_SignalGetTokenByRoomID_Handler,
		},
		{
			MethodName: "SignalGetRooms",
			Handler:    _Signal_SignalGetRooms_Handler,
		},
		{
			MethodName: "GetSignalInvitationInfo",
			Handler:    _Signal_GetSignalInvitationInfo_Handler,
		},
		{
			MethodName: "GetSignalInvitationInfoStartApp",
			Handler:    _Signal_GetSignalInvitationInfoStartApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openmeeting/signal/signal.proto",
}
